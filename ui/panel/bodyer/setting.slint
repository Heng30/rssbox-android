import { Theme, Icons } from "../../theme.slint";
import { Store, TabIndex, SettingUI, SettingSync, SettingProxy } from "../../store.slint";
import { Logic } from "../../logic.slint";
import { Util } from "../../util.slint";
import { CenterLayout, Link, Brand, IconBtn, Label, Head, SettingEntry, SettingDetail } from "../../base/widgets.slint";
import { SpinBox, LineEdit, CheckBox, ComboBox } from "std-widgets.slint";

enum SettingDetailIndex {
    UI,
    Sync,
    Proxy,
    Cache,
    About,
    Help,
}

component UI inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "Áïå Èù¢");

    in-out property<string> language: "cn";

    public function get() -> SettingUI {
        return {
            font-size: font-size-txt.text,
            font-family: fonts-combox.current-value,
            language: root.language,
        };
    }

    public function set(setting :SettingUI) {
        font-size-txt.text = setting.font-size;
        fonts-combox.current-value = setting.font-family;
        root.language = setting.language;

        if (setting.language == "en") {
            cn-checkbox.checked = false;
            en-checkbox.checked = true;
        } else {
            cn-checkbox.checked = true;
            en-checkbox.checked = false;
        }
    }

    VerticalLayout {
        alignment: start;
        padding: Theme.padding * 2;
        spacing: Theme.spacing * 4;

        VerticalLayout {
            spacing: Theme.spacing;

            font-size-txt := Label {
                font-size: Theme.title4-font-size;
                text: Logic.tr(Store.is-cn, "Â≠ó‰ΩìÂ§ßÂ∞è");
            }

            font-size-lineedit := LineEdit {
                height: font-size-txt.preferred-height * 1.6;
                placeholder-text: Logic.tr(Store.is-cn, "10 ~ 50");
                input-type: number;
            }
        }

        VerticalLayout {
            spacing: Theme.spacing;

            fonts-label := Label {
                font-size: Theme.title4-font-size;
                text: Logic.tr(Store.is-cn, "Â≠ó‰ΩìÊ†∑Âºè");
            }

            fonts-combox := ComboBox {
                height: fonts-label.preferred-height * 1.6;
                model: ["SystemDefault", "SourceHanSerifCN"];
                current-value: self.model[0];
                current-index: 0;
            }
        }

        VerticalLayout {
            spacing: Theme.spacing;

            Label {
                font-size: Theme.title4-font-size;
                text: Logic.tr(Store.is-cn, "ÈÄâÊã©ËØ≠Ë®Ä");
            }

            HorizontalLayout {
                cn-checkbox := CheckBox {
                    width: 50%; text: "‰∏≠Êñá";
                    checked: root.language != "en";
                    toggled => {
                        if (!self.checked) {
                            self.checked = true;
                            return;
                        }

                        en-checkbox.checked = !self.checked;
                        root.language = "cn";
                    }
                }

                en-checkbox := CheckBox {
                    text: "English";
                    checked: root.language == "en";
                    toggled => {
                        if (!self.checked) {
                            self.checked = true;
                            return;
                        }

                        cn-checkbox.checked = !self.checked;
                        root.language = "en";
                    }
                }
            }
        }
    }
}

component Sync inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "Âêå Ê≠•");

    public function get() -> SettingSync {
        return {
            // TODO
        };
    }

    public function set(setting: SettingSync) {
    }

}

component Proxy inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "‰ª£ ÁêÜ");

    public function get() -> SettingProxy {
        return {
            // TODO

        };
    }

    public function set(setting: SettingProxy) {
    }
}

component Cache inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "Áºì Â≠ò");
}

component About inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "ÂÖ≥ ‰∫é");

    VerticalLayout {
        alignment: start;
        spacing: Theme.spacing * 4;
        padding: Theme.padding * 2;
        padding-top: Theme.padding * 4;

        HorizontalLayout {
            alignment: center;

            Label {
                color: Theme.brand-color;
                text: Store.about-dialog.title;
                font-size: Theme.title1-font-size;
            }
        }

        Label {
            horizontal-alignment: center;
            text: Store.about-dialog.text;
            wrap: word-wrap;
        }

        VerticalLayout {
            spacing: Theme.spacing * 2;
            HorizontalLayout {
                alignment: center;
                spacing: Theme.spacing * 2;

                Label {
                    text: "üéâ‚ù§Buy Me a Coffee(MetaMask)‚ù§üéâ";
                }

                IconBtn {
                    icon: Icons.copy;
                    clicked => { Logic.copy-to-clipboard(Store.about-dialog.sponsor); }
                }
            }

            HorizontalLayout {
                alignment: center;
                Link {
                    wrap: word-wrap;
                    text: Store.about-dialog.sponsor;
                    color: Theme.placeholder-text-color;
                    font-size: Theme.default-font-size - 2px;

                    clicked => {
                        Util.open-url("https://etherscan.io/address/" + Store.about-dialog.sponsor);
                    }
                }
            }
        }

        HorizontalLayout {
            alignment: center;
            Brand { width: 35%; }
        }
    }
}

component Help inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "Â∏Æ Âä©");
}

component Body inherits VerticalLayout {
    alignment: start;
    spacing: Theme.spacing;

    in-out property<SettingDetailIndex> current-setting-detail-index: SettingDetailIndex.Sync;

    callback switch(SettingDetailIndex);

    head := Head {
        hbox-alignment: LayoutAlignment.start;
        icon: Icons.setting-fill;
        title: Logic.tr(Store.is-cn, "ËÆæÁΩÆ");
    }

    Flickable {
        viewport-height: vbox.preferred-height;

        vbox := VerticalLayout {
            spacing: Theme.spacing * 2;

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Áïå Èù¢");
                icon: Icons.ui;

                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.UI;
                    root.switch(SettingDetailIndex.UI);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Âêå Ê≠•");
                icon: Icons.sync;
                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.Sync;
                    root.switch(SettingDetailIndex.Sync);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "‰ª£ ÁêÜ");
                icon: Icons.proxy-light;
                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.Proxy;
                    root.switch(SettingDetailIndex.Proxy);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Áºì Â≠ò");
                icon: Icons.cache-light;
                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.Cache;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "ÂÖ≥ ‰∫é");
                icon: Icons.about-light;
                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.About;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Â∏Æ Âä©");
                icon: Icons.help-light;
                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.Help;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Github");
                icon: Icons.github;
                clicked => {
                    Util.open-url("https://github.com/Heng30/rssbox-android");
                }
            }
        }
    }
}

export component Setting inherits Rectangle {
    visible: TabIndex.Setting == Store.current-tab-index;

    body := Body {
        visible: false;

        switch(index) => {
            if (index == SettingDetailIndex.UI) {
                ui.set(Logic.get-setting-ui());
            } else if (index == SettingDetailIndex.Sync) {
                sync.set(Logic.get-setting-sync());
            } else if (index == SettingDetailIndex.Proxy) {
                proxy.set(Logic.get-setting-proxy());
            }
        }
    }

    Rectangle {
        visible: !body.visible;

        ui := UI {
            visible: body.current-setting-detail-index == SettingDetailIndex.UI;
            back => {
                body.visible = true;
                Logic.set-setting-ui(self.get());
            }
        }

        sync := Sync {
            visible: body.current-setting-detail-index == SettingDetailIndex.Sync;
            back => {
                body.visible = true;
                Logic.set-setting-sync(self.get());
            }
        }

        proxy := Proxy {
            visible: body.current-setting-detail-index == SettingDetailIndex.Proxy;
            back => {
                body.visible = true;
                Logic.set-setting-proxy(self.get());
            }
        }

        Cache {
            visible: body.current-setting-detail-index == SettingDetailIndex.Cache;
            back => { body.visible = true; }
        }

        About {
            visible: body.current-setting-detail-index == SettingDetailIndex.About;
            back => { body.visible = true; }
        }

        Help {
            visible: body.current-setting-detail-index == SettingDetailIndex.Help;
            back => { body.visible = true; }
        }
    }
}

