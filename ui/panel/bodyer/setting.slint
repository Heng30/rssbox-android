import { LineEdit, CheckBox, ComboBox } from "std-widgets.slint";
import { Theme, Icons } from "../../theme.slint";
import { Logic } from "../../logic.slint";
import { Util } from "../../util.slint";
import { Store, TabIndex, SettingUI, SettingSync, SettingProxy, SettingReading } from "../../store.slint";
import { CenterLayout, Link, Brand, IconBtn, Label, Head, SettingEntry, SettingDetail, SettingDetailInner, SettingDetailInnerVbox, SettingDetailLabel } from "../../base/widgets.slint";

enum SettingDetailIndex {
    UI,
    Reading,
    Sync,
    Proxy,
    About,
    Help,
    Feedback,
    Donate,
}

component UI inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "界 面");

    in-out property<string> language: "cn";

    public function get() -> SettingUI {
        return {
            font-size: font-size-lineedit.text,
            font-family: fonts-combox.current-value,
            language: root.language,
        };
    }

    public function set(setting :SettingUI) {
        font-size-lineedit.text = setting.font-size;
        fonts-combox.current-value = setting.font-family;
        root.language = setting.language;

        if (setting.font-family == "") {
            fonts-combox.current-value = "SystemDefault";
        }

        if (setting.language == "en") {
            cn-checkbox.checked = false;
            en-checkbox.checked = true;
        } else {
            cn-checkbox.checked = true;
            en-checkbox.checked = false;
        }
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            font-size-txt := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "字体大小");
            }

            font-size-lineedit := LineEdit {
                input-type: number;
                height: font-size-txt.preferred-height * 1.6;
                placeholder-text: Logic.tr(Store.is-cn, "10 ~ 50");
            }
        }

        SettingDetailInnerVbox {
            fonts-label := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "字体样式");
            }

            fonts-combox := ComboBox {
                height: fonts-label.preferred-height * 1.6;
                model: ["SystemDefault", "SourceHanSerifCN"];
                current-value: self.model[0];
                current-index: 0;
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "选择语言");
            }

            HorizontalLayout {
                cn-checkbox := CheckBox {
                    width: 50%; text: "中文";
                    checked: root.language != "en";
                    toggled => {
                        if (!self.checked) {
                            self.checked = true;
                            return;
                        }

                        en-checkbox.checked = !self.checked;
                        root.language = "cn";

                        Logic.set-setting-ui(root.get());
                    }
                }

                en-checkbox := CheckBox {
                    text: "English";
                    checked: root.language == "en";
                    toggled => {
                        if (!self.checked) {
                            self.checked = true;
                            return;
                        }

                        cn-checkbox.checked = !self.checked;
                        root.language = "en";

                        Logic.set-setting-ui(root.get());
                    }
                }
            }
        }
    }
}

component Reading inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "阅 读");

    public function get() -> SettingReading {
        return {
            browser: browser-combox.current-value,
            delete-after-reading: delete-after-reading-checkbox.checked,
        };
    }

    public function set(setting: SettingReading) {
        browser-combox.current-value = setting.browser;
        delete-after-reading-checkbox.checked = setting.delete-after-reading;

        if (browser-combox.current-value == "") {
            browser-combox.current-value = browser-combox.model[0];
        }
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            browser-label := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "选择浏览器");
            }

            browser-combox := ComboBox {
                height: browser-label.preferred-height * 1.6;
                model: [ "Default", "Firefox", "InternetExplorer", "Chrome", "Opera", "Safari", "WebPositive" ];
                current-value: self.model[0];
                current-index: 0;
            }

        }

        delete-after-reading-checkbox := CheckBox {
            text: self.checked ? Logic.tr(Store.is-cn, "已启用阅后即焚") : Logic.tr(Store.is-cn, "未启用阅后即焚");

        }
    }
}


component Sync inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "同 步");

    public function get() -> SettingSync {
        return {
            sync-interval: sync-interval-lineedit.text,
            sync-timeout: sync-timeout-lineedit.text,
            is-auto-sync: sync-auto-checkbox.checked,
            is-start-sync: start-sync-checkbox.checked,
        };
    }

    public function set(setting: SettingSync) {
        sync-interval-lineedit.text = setting.sync-interval;
        sync-timeout-lineedit.text = setting.sync-timeout;
        sync-auto-checkbox.checked = setting.is-auto-sync;
        start-sync-checkbox.checked = setting.is-start-sync;
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            sync-interval-txt := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "同步时间间隔(分钟)");
            }

            sync-interval-lineedit := LineEdit {
                input-type: number;
                height: sync-interval-txt.preferred-height * 1.6;
                placeholder-text: Logic.tr(Store.is-cn, "请输入时间间隔");
            }

        }

        SettingDetailInnerVbox {
            sync-timeout-txt := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "同步超时(秒)");
            }

            sync-timeout-lineedit := LineEdit {
                input-type: number;
                height: sync-timeout-txt.preferred-height * 1.6;
                placeholder-text: Logic.tr(Store.is-cn, "请输入同步超时");
            }
        }

        sync-auto-checkbox := CheckBox {
            text: self.checked ? Logic.tr(Store.is-cn, "已启用自动同步") : Logic.tr(Store.is-cn, "未启用自动同步");
        }

        start-sync-checkbox := CheckBox {
            text: self.checked ? Logic.tr(Store.is-cn, "程序启动时，马上进行一次同步") : Logic.tr(Store.is-cn, "程序启动时，不马上进行一次同步");
        }
    }
}

component Proxy inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "代 理");

    public function get() -> SettingProxy {
        return {
            proxy-type: type-combox.current-value,
            http-url: http-url-lineedit.text,
            http-port: http-port-lineedit.text,
            socks5-url: socks5-url-lineedit.text,
            socks5-port: socks5-port-lineedit.text,
        };
    }

    public function set(setting: SettingProxy) {
        type-combox.current-value = setting.proxy-type;
        http-url-lineedit.text = setting.http-url;
        http-port-lineedit.text = setting.http-port;
        socks5-url-lineedit.text = setting.socks5-url;
        socks5-port-lineedit.text = setting.socks5-port;

        if (type-combox.current-value == "") {
            type-combox.current-value = type-combox.model[0];
        }
    }

    SettingDetailInner {
        type-combox := ComboBox {
            height: http-url-txt.preferred-height * 1.6;
            model: ["Http", "Socks5"];
            current-value: self.model[0];
        }

        Rectangle {
            VerticalLayout {
                visible: type-combox.current-value == "Http";
                spacing: Theme.spacing * 4;

                SettingDetailInnerVbox {
                    http-url-txt := SettingDetailLabel {
                        text: Logic.tr(Store.is-cn, "代理地址");
                    }

                    http-url-lineedit:= LineEdit {
                        height: http-url-txt.preferred-height * 1.6;
                        placeholder-text: "127.0.0.1";
                    }
                }

                SettingDetailInnerVbox {
                    http-port-txt := SettingDetailLabel {
                        text: Logic.tr(Store.is-cn, "代理端口");
                    }

                    http-port-lineedit:= LineEdit {
                        input-type: number;
                        height: http-port-txt.preferred-height * 1.6;
                        placeholder-text: "3128";
                    }
                }
            }

            VerticalLayout {
                visible: type-combox.current-value == "Socks5";
                spacing: Theme.spacing * 4;

                SettingDetailInnerVbox {
                    socks5-url-txt := SettingDetailLabel {
                        text: Logic.tr(Store.is-cn, "代理地址");
                    }

                    socks5-url-lineedit:= LineEdit {
                        height: socks5-url-txt.preferred-height * 1.6;
                        placeholder-text: "127.0.0.1";
                    }
                }

                SettingDetailInnerVbox {
                    socks5-port-txt := SettingDetailLabel {
                        text: Logic.tr(Store.is-cn, "代理端口");
                    }

                    socks5-port-lineedit:= LineEdit {
                        input-type: number;
                        height: socks5-port-txt.preferred-height * 1.6;
                        placeholder-text: "1080";
                    }
                }
            }
        }
    }
}

component About inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "关 于");

    VerticalLayout {
        alignment: start;
        spacing: Theme.spacing * 4;
        padding: Theme.padding * 2;
        padding-top: Theme.padding * 4;

        HorizontalLayout {
            alignment: center;

            Label {
                color: Theme.brand-color;
                text: Store.about-dialog.title;
                font-size: Theme.title1-font-size;
            }
        }

        Label {
            horizontal-alignment: center;
            text: Store.about-dialog.text;
            wrap: word-wrap;
        }

        VerticalLayout {
            spacing: Theme.spacing * 2;
            HorizontalLayout {
                alignment: center;
                spacing: Theme.spacing * 2;

                Label {
                    text: "🎉❤Buy Me a Coffee(MetaMask)❤🎉";
                }

                IconBtn {
                    icon: Icons.copy;
                    clicked => { Logic.copy-to-clipboard(Store.about-dialog.sponsor); }
                }
            }

            HorizontalLayout {
                alignment: center;
                Link {
                    wrap: word-wrap;
                    text: Store.about-dialog.sponsor;
                    color: Theme.placeholder-text-color;
                    font-size: Theme.default-font-size - 2px;

                    clicked => {
                        Util.open-url("https://etherscan.io/address/" + Store.about-dialog.sponsor);
                    }
                }
            }
        }

        HorizontalLayout {
            alignment: center;
            Brand { width: 35%; }
        }
    }
}

component Help inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "帮 助");

    Flickable {
        SettingDetailInner {
            Label {
                text: Store.is-cn ? Store.help-dialog.text-cn : Store.help-dialog.text-en;
                wrap: word-wrap;
            }
        }
    }
}

component Feedback inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "反 馈");

//     SettingDetailInner {
//         SettingDetailInnerVbox {
//             browser-label := SettingDetailLabel {
//                 text: Logic.tr(Store.is-cn, "选择浏览器");
//             }

//             browser-combox := ComboBox {
//                 height: browser-label.preferred-height * 1.6;
//                 model: [ "Default", "Firefox", "InternetExplorer", "Chrome", "Opera", "Safari", "WebPositive" ];
//                 current-value: self.model[0];
//                 current-index: 0;
//             }

//         }

//         delete-after-reading-checkbox := CheckBox {
//             text: self.checked ? Logic.tr(Store.is-cn, "已启用阅后即焚") : Logic.tr(Store.is-cn, "未启用阅后即焚");

//         }
//     }
}

component Donate inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "捐 赠");

//     SettingDetailInner {
//         SettingDetailInnerVbox {
//             browser-label := SettingDetailLabel {
//                 text: Logic.tr(Store.is-cn, "选择浏览器");
//             }

//             browser-combox := ComboBox {
//                 height: browser-label.preferred-height * 1.6;
//                 model: [ "Default", "Firefox", "InternetExplorer", "Chrome", "Opera", "Safari", "WebPositive" ];
//                 current-value: self.model[0];
//                 current-index: 0;
//             }

//         }

//         delete-after-reading-checkbox := CheckBox {
//             text: self.checked ? Logic.tr(Store.is-cn, "已启用阅后即焚") : Logic.tr(Store.is-cn, "未启用阅后即焚");

//         }
//     }
}

component Body inherits VerticalLayout {
    alignment: start;
    spacing: Theme.spacing;

    // TODO
    in-out property<SettingDetailIndex> current-setting-detail-index: SettingDetailIndex.UI;

    callback switch(SettingDetailIndex);

    head := Head {
        hbox-alignment: LayoutAlignment.start;
        icon: Icons.setting-fill;
        title: Logic.tr(Store.is-cn, "设置");
    }

    Flickable {
        viewport-height: vbox.preferred-height;

        vbox := VerticalLayout {
            spacing: Theme.spacing * 2;

            SettingEntry {
                text: Logic.tr(Store.is-cn, "界 面");
                icon: Icons.ui;

                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.UI;
                    root.switch(SettingDetailIndex.UI);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "阅 读");
                icon: Icons.reading;

                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.Reading;
                    root.switch(SettingDetailIndex.Reading);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "同 步");
                icon: Icons.sync;
                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.Sync;
                    root.switch(SettingDetailIndex.Sync);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "代 理");
                icon: Icons.proxy-light;
                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.Proxy;
                    root.switch(SettingDetailIndex.Proxy);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "关 于");
                icon: Icons.about-light;
                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.About;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "帮 助");
                icon: Icons.help-light;
                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.Help;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "反 馈");
                icon: Icons.feedback;
                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.Feedback;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "捐 赠");
                icon: Icons.donate;
                clicked => {
                    root.visible = false;
                    root.current-setting-detail-index = SettingDetailIndex.Donate;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "缓 存");
                attach-text: Store.cache-size;
                icon: Icons.cache-light;
                clicked => {
                    Store.ok-cancel-dialog-setting.title-type = "warning";
                    Store.ok-cancel-dialog-setting.title-text = Logic.tr(Store.is-cn, "警告");
                    Store.ok-cancel-dialog-setting.body-text = Logic.tr(Store.is-cn, "是否删除全部缓存？");
                    Store.ok-cancel-dialog-setting.handle-type = "remove-all-cache";
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Github");
                icon: Icons.github;
                clicked => {
                    Util.open-url("https://github.com/Heng30/rssbox-android");
                }
            }
        }
    }
}

export component Setting inherits Rectangle {
    visible: TabIndex.Setting == Store.current-tab-index;

    body := Body {
        switch(index) => {
            if (index == SettingDetailIndex.UI) {
                ui.set(Logic.get-setting-ui());
            } else if (index == SettingDetailIndex.Reading) {
                reading.set(Logic.get-setting-reading());
            } else if (index == SettingDetailIndex.Sync) {
                sync.set(Logic.get-setting-sync());
            } else if (index == SettingDetailIndex.Proxy) {
                proxy.set(Logic.get-setting-proxy());
            }
        }
    }

    Rectangle {
        visible: !body.visible;

        ui := UI {
            visible: body.current-setting-detail-index == SettingDetailIndex.UI;
            back => {
                if (self.get().font-size == "") {
                    Logic.show-message(Logic.tr(Store.is-cn, "非法输入，输入不能为空"), "warning");
                    return;
                }

                body.visible = true;
                Logic.set-setting-ui(self.get());
            }
        }

        reading := Reading {
            visible: body.current-setting-detail-index == SettingDetailIndex.Reading;
            back => {
                body.visible = true;
                Logic.set-setting-reading(self.get());
            }
        }

        sync := Sync {
            visible: body.current-setting-detail-index == SettingDetailIndex.Sync;
            back => {
                if (self.get().sync-interval == "" || self.get().sync-timeout == "") {
                    Logic.show-message(Logic.tr(Store.is-cn, "非法输入，输入不能为空"), "warning");
                    return;
                }

                body.visible = true;
                Logic.set-setting-sync(self.get());
            }
        }

        proxy := Proxy {
            visible: body.current-setting-detail-index == SettingDetailIndex.Proxy;
            back => {
                body.visible = true;
                Logic.set-setting-proxy(self.get());
            }
        }

        About {
            visible: body.current-setting-detail-index == SettingDetailIndex.About;
            back => { body.visible = true; }
        }

        Help {
            visible: body.current-setting-detail-index == SettingDetailIndex.Help;
            back => { body.visible = true; }
        }

        Feedback {
            visible: body.current-setting-detail-index == SettingDetailIndex.Feedback;
            back => { body.visible = true; }

        }

        Donate {
            visible: body.current-setting-detail-index == SettingDetailIndex.Donate;
            back => { body.visible = true; }

        }
    }
}
