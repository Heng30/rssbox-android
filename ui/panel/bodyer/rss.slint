import { ListView } from "std-widgets.slint";
import { Theme, Icons } from "../../theme.slint";
import { Store } from "../../store.slint";
import { Logic } from "../../logic.slint";
import { Util } from "../../util.slint";
import { IconBtn, Head, Label, Tag, Link, Label, NoDataImg, NoMessageImg, CenterLayout } from "../../base/widgets.slint";
import { Theme } from "../../theme.slint";

component RHead inherits Head {
    callback scroll-to-top <=> ta.clicked;

    icon: Icons.list;
    title: Logic.tr(Store.is-cn, "订阅");

    HorizontalLayout {
        horizontal-stretch: 1;
        padding-left: Theme.padding;
        padding-right: Theme.padding;

        Rectangle {
            clip: true;
            Label {
                text: Logic.name-rss(Store.current-rss-uuid);
                font-size: Theme.default-font-size - 2px;
                color: Theme.secondary-text-color;
                overflow: elide;
            }

            ta := TouchArea { }
        }
    }

    HorizontalLayout {
        spacing: Theme.padding * 3;

        CenterLayout {
            refresh-icon := IconBtn {
                is-ltr: false;
                icon: Icons.refresh;
                icon-width: Theme.icon-size * 1.2;
                text: Logic.update-time-rss(Store.current-rss-uuid, Store.rss-update-time-flag);
                font-size: Theme.default-font-size - 4px;
                text-color: Theme.placeholder-text-color;
                background: Colors.transparent;

                clicked => { Logic.sync-rss(Store.current-rss-uuid); }
            }
        }

        CenterLayout {
            remove-all-icon := IconBtn {
                icon: Icons.delete;

                clicked => {
                    Store.ok-cancel-dialog-setting.title-type = "warning";
                    Store.ok-cancel-dialog-setting.title-text = Logic.tr(Store.is-cn, "警告");
                    Store.ok-cancel-dialog-setting.body-text = Logic.tr(Store.is-cn, "是否删除全部？");
                    Store.ok-cancel-dialog-setting.handle-type = "remove-all-entrys";
                    Store.ok-cancel-dialog-setting.handle-uuid = Store.current-rss-uuid;
                }
            }
        }
    }
}

component RssListItems inherits Rectangle {
    private property<length> item-height: 40px;
    private property<color> selected-item-color: Theme.brand-color.darker(30%);

    callback switch-rss();

    Flickable {
        viewport-height: Store.rss-lists.length * root.item-height;

        for data[index] in Store.rss-lists : VerticalLayout {
            y: index * item-height;
            height: root.item-height;

            Rectangle {
                touch := TouchArea {
                    clicked => {
                        Logic.switch-rss(Store.current-rss-uuid, data.uuid);
                        root.switch-rss();
                    }
                }

                HorizontalLayout {
                    padding-left: Theme.padding;

                    VerticalLayout {
                        alignment: center;
                        height: root.item-height;
                        padding-right: Theme.padding * 2;

                        Rectangle {
                            width: 3px;
                            height: 60%;
                            border-radius: 2px;
                            background: data.uuid == Store.current-rss-uuid ?  root.selected-item-color : Colors.transparent;
                        }
                    }

                    HorizontalLayout {
                        spacing: Theme.spacing * 2;

                        VerticalLayout {
                            alignment: center;
                            Image {
                                source: Store.icons-dialog-setting.icons[Math.max(0, Math.min(data.icon-index, Store.icons-dialog-setting.icons.length - 1))];
                                colorize: data.uuid == Store.current-rss-uuid ? root.selected-item-color : Theme.regular-text-color;
                                width: Theme.enlarge-font-size * 1.2;
                            }
                        }

                        name-txt := Label {
                            color: data.uuid == Store.current-rss-uuid ? root.selected-item-color : Theme.regular-text-color;
                            text: data.name;
                            font-size: Theme.enlarge-font-size;
                            overflow: elide;
                        }
                    }

                    HorizontalLayout {
                        alignment: end;
                        spacing: Theme.spacing * 2;
                        padding-left: Theme.padding;
                        padding-right: Theme.padding;

                        if data.is-update-failed : VerticalLayout {
                            alignment: center;
                            IconBtn {
                                icon: Icons.sync-failed;
                                icon-width: Theme.icon-size * 0.8;
                                colorize: Theme.danger-color;
                                border-radius: Theme.border-radius;
                            }
                        }

                        VerticalLayout {
                            alignment: center;
                            height: root.item-height;
                            Tag {
                                text: data.unread-counts;
                                text-color: Theme.danger-color;
                                background: Colors.transparent;
                            }
                        }

                        VerticalLayout {
                            alignment: center;
                            IconBtn {
                                icon: Icons.star ;
                                colorize: data.is-favorite ? Theme.mark-color : Theme.unmark-color;
                                border-radius: Theme.border-radius;
                                clicked => { Logic.toggle-rss-favorite(data.uuid); }
                            }
                        }
                    }
                }
            }
        }
    }
}


component RssList inherits Rectangle {
    in-out property <bool> is-show-list : false;

    rect := Rectangle {
        animate width {
            duration: Theme.default-animate-duration;
            easing: ease-in-out;
        }

        x: 0px;
        width: root.is-show-list ? 70% : 0%;
        background: Theme.light-fill-color;

        RssListItems { switch-rss => { root.is-show-list = false; } }

        if Store.rss-lists.length == 0 : Rectangle {
            clip: true;
            width: rect.width;

            NoMessageImg {
                width: parent.width * 0.8;
                text: Logic.tr(Store.is-cn, "没有订阅");
            }
        }
    }

    TouchArea {
        x: rect.width;
        width: root.width - rect.width;
        visible: root.is-show-list;
        clicked => { root.is-show-list = false; }
    }
}

export component Entry inherits Rectangle {
    in-out property title <=> title-txt.text;
    in-out property pub-date-text <=> pub-date-txt.text;
    in-out property<string> summary;
    in-out property<string> author;
    in-out property<string> tag-text;
    in-out property<bool> is-read;
    in-out property<string> uuid;
    in-out property<string> suuid;
    in-out property<string> url;

    background: Theme.lighter-fill-color;
    border-radius: Theme.border-radius;

    drop-shadow-blur: Theme.padding * 2;
    drop-shadow-color: Theme.dark-fill-color;

    VerticalLayout {
        padding: Theme.padding * 2;
        spacing: Theme.spacing * 2;

        title-txt := Link {
            is-read: root.is-read;

            clicked => {
                if (!self.is-read) {
                    Logic.set-entry-read(Store.current-rss-uuid, root.uuid);
                }

                Util.open-url(root.url);
                if (Logic.get-setting-reading().is-delete-after-reading) {
                    Logic.remove-entry(Store.current-rss-uuid, root.uuid);
                }
            }
        }

        if root.summary != "" : Text {
            font-size: Theme.default-font-size - 1px;
            color: root.is-read ? Theme.have-read-text-color : Theme.regular-text-color;
            wrap: word-wrap;
            text: root.summary;
        }

        if root.summary == "" : Rectangle {
            height: 20px;
        }

        HorizontalLayout {
            alignment: end;
            spacing: Theme.padding * 4;

            author-txt := Text {
                visible: root.author != "";
                font-size: Theme.default-font-size - 4px;
                color: Theme.placeholder-text-color;
                text: Logic.tr(Store.is-cn, "作者") + ": " + root.author;
            }

            pub-date-txt := Text {
                font-size: Theme.default-font-size - 4px;
                color: Theme.placeholder-text-color;
            }
        }
    }
}

export component EntryList inherits Rectangle {
    clip: true;

    public function scroll-to-top()  {
        lv.viewport-y = 0;
    }

    lv := ListView {
        x: 0px;
        width: root.width + Theme.scroll-width;

        for item[index] in Store.rss-entrys : rect := Rectangle {
            private property<length> max-move-pixels-up-bound: self.width * 0.04;
            private property<length> max-move-pixels-low-bound: self.width * 0.02;
            private property<bool> is-show-opt: false;
            private property<bool> is-hide-opt: true;

            public function show-opt() {
                rect.x = -opt.width - Theme.padding;
                rect.is-show-opt = true;
                rect.is-hide-opt = false;
            }

            public function hide-opt() {
                rect.x = 0;
                rect.is-hide-opt = true;
                rect.is-show-opt = false;
            }

            animate x {
                duration: Theme.default-animate-duration;
                easing: ease-in-out;
            }

            TouchArea {
                moved => {
                    if (lv.enabled &&
                        (self.pressed-x - self.mouse-x > parent.max-move-pixels-low-bound ||
                         self.mouse-x - self.pressed-x > parent.max-move-pixels-low-bound)) {
                        lv.enabled = false;
                    }

                    if (!rect.is-show-opt) {
                        if (self.pressed-x - self.mouse-x > parent.max-move-pixels-up-bound) {
                            rect.show-opt();
                        }
                    }

                    if (!rect.is-hide-opt) {
                        if (self.mouse-x - self.pressed-x > parent.max-move-pixels-up-bound) {
                            hide-opt();
                        }
                    }
                }

                pointer-event(evt) =>  {
                    if (evt.kind == PointerEventKind.up) {
                        lv.enabled = true;
                    }
                }
            }

            entry-vbox := VerticalLayout {
                padding: Theme.padding / 2;

                Entry {
                    uuid: item.uuid;
                    suuid: item.suuid;
                    title: item.title;
                    author: item.author;
                    summary: item.summary;
                    tag-text: item.tags;
                    pub-date-text: item.pub-date;
                    is-read: item.is-read;
                    url: item.url;
                }
            }

            opt := VerticalLayout {
                x: entry-vbox.width + Theme.padding;
                width: 50px;
                height: entry-vbox.height - entry-vbox.padding * 2 - Theme.padding;
                alignment: center;

                Rectangle {
                    height: 50%;
                    IconBtn {
                        width: 100%;
                        height: 100%;
                        icon: Icons.star;
                        border-radius: 0;
                        colorize: Theme.mark-color;

                        clicked => {
                            rect.hide-opt();
                            Logic.favorite-entry(Store.current-rss-uuid, item.uuid);
                        }
                    }
                }

                Rectangle {
                    height: 50%;
                    IconBtn {
                        width: 100%;
                        height: 100%;
                        icon: Icons.delete;
                        border-radius: 0;
                        colorize: Theme.danger-color;

                        clicked => {
                            rect.hide-opt();
                            Logic.remove-entry(Store.current-rss-uuid, item.uuid);
                        }
                    }
                }
            }
        }
    }

    if Store.rss-entrys.length == 0 : CenterLayout {
        NoDataImg {
            width: root.width * 0.6;
            text: Logic.tr(Store.is-cn, "没有消息");
        }
    }
}

component Body inherits Rectangle {
    in-out property is-show-rsslist <=> rsslist.is-show-list;

    public function entrylist-scroll-to-top() {
        entrylist.scroll-to-top();
    }

    entrylist := EntryList {}
    rsslist := RssList { }
}

export component Rss inherits VerticalLayout {
    head := RHead {
        clicked => { body.is-show-rsslist = !body.is-show-rsslist; }
        scroll-to-top => { body.entrylist-scroll-to-top(); }
    }

    body := Body { }
}

