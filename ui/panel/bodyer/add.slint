import { Theme, Icons } from "../../theme.slint";
import { Store, TabIndex, RssConfig } from "../../store.slint";
import { Logic } from "../../logic.slint";
import { Btn, IconBtn, NoMessageImg, Label, Head, SettingDetailInner, SettingDetailInnerVbox, SettingDetailLabel } from "../../base/widgets.slint";
import { CheckBox, ComboBox, LineEdit } from "std-widgets.slint";

enum BtnIndex {
    New,
    Edit,
    Delete,
}

component RssList inherits Rectangle {
    private property<length> item-height: 40px;
    private property<color> selected-item-color: Theme.dark-fill-color;
    out property<string> current-uuid;

    if Store.rss-lists.length == 0 : Rectangle {
        NoMessageImg {
            width: parent.width * 0.6;
            text: Logic.tr(Store.is-cn, "没有订阅");
        }
    }

    Flickable {
        viewport-height: Store.rss-lists.length * root.item-height;

        for data[index] in Store.rss-lists : Rectangle {
            y: index * item-height;
            height: root.item-height;

            background: data.uuid == root.current-uuid ? root.selected-item-color : Colors.transparent;

            touch := TouchArea {
                clicked => { root.current-uuid = data.uuid; }
            }

            HorizontalLayout {
                padding-left: Theme.padding * 2;

                HorizontalLayout {
                    spacing: Theme.spacing * 2;

                    VerticalLayout {
                        alignment: center;
                        IconBtn {
                            icon: Store.icons-dialog-setting.icons[Math.max(0, Math.min(data.icon-index, Store.icons-dialog-setting.icons.length - 1))];
                            width: Theme.icon-size * 1.2;
                            background: Colors.transparent;
                        }
                    }

                    Label {
                        text: data.name;
                        overflow: elide;
                    }
                }

                HorizontalLayout {
                    alignment: end;
                    spacing: Theme.spacing * 2;
                    padding-right: Theme.padding;

                    VerticalLayout {
                        alignment: center;
                        IconBtn {
                            icon: Icons.star;
                            colorize: data.is-mark ? Theme.mark-color : Theme.unmark-color;
                            clicked => { Logic.toggle-rss-mark(index, data.uuid); }
                        }
                    }
                }
            }
        }
    }
}

component RssListBtns inherits HorizontalLayout {
    in property<string> current-uuid;
    private property <length> btn-width: 100px;

    alignment: center;
    spacing: Theme.spacing * 4;
    padding: Theme.padding * 4;

    callback current-btn-index(BtnIndex);

    IconBtn {
        width: root.btn-width; height: 40px;
        text: Logic.tr(Store.is-cn, "新建");
        icon: Icons.add-fill;
        icon-width: Theme.icon-size * 0.8;
        border-radius: self.height / 2;
        bg-color: Theme.success-color.darker(10%);
        bg-pressed-color: self.bg-color.darker(30%);
        colorize: Theme.basic-white-color;

        clicked => { current-btn-index(BtnIndex.New); }
    }

    IconBtn {
        width: root.btn-width;
        text: Logic.tr(Store.is-cn, "编辑");
        icon: Icons.edit;
        border-radius: self.height / 2;
        bg-color: Theme.info-color.brighter(20%);
        bg-pressed-color: self.bg-color.darker(30%);
        colorize: self.bg-pressed-color.darker(50%);

        clicked => { current-btn-index(BtnIndex.Edit); }
    }

    IconBtn {
        width: root.btn-width;
        text: Logic.tr(Store.is-cn, "删除");
        icon: Icons.delete;
        border-radius: self.height / 2;
        bg-color: Theme.danger-color;
        bg-pressed-color: self.bg-color.darker(30%);
        colorize: self.bg-pressed-color.darker(50%);

        clicked => { current-btn-index(BtnIndex.Delete); }
    }
}

component AddEdit inherits Rectangle {
    in-out property<int> icon-index: 0;

    public function get() -> RssConfig {
        return {
            name: line-edit-name.text,
            url: line-edit-url.text,
            use-proxy: use-proxy-checkbox.checked,
            is-favorite: favorite-checkbox.checked,
            icon-index: root.icon-index,
            feed-format: feed-format-combobox.current-value,
        };
    }

    public function set(config: RssConfig) {
        line-edit-name.text = config.name;
        line-edit-url.text = config.url;
        use-proxy-checkbox.checked = config.use-proxy;
        favorite-checkbox.checked = config.is-favorite;
        root.icon-index = config.icon-index;

        feed-format-combobox.current-value = config.feed-format;
        if (config.feed-format == "") {
            feed-format-combobox.current-value = feed-format-combobox.model[0];
        }
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            txt-name := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "RSS名称和图标");
            }

            HorizontalLayout {
                height: txt-name.preferred-height * 1.6;
                spacing: Theme.spacing;

                line-edit-name := LineEdit {
                    placeholder-text: Logic.tr(Store.is-cn, "请输入RSS名称");
                }

                rss-icon := IconBtn {
                    width: self.height;
                    icon: Store.icons-dialog-setting.icons[Math.max(0, Math.min(root.icon-index, Store.icons-dialog-setting.icons.length - 1))];
                    clicked => { Store.icons-dialog-setting.show = true; }
                }
            }
        }

        SettingDetailInnerVbox {
            txt-url := SettingDetailLabel {
                font-size: Theme.title4-font-size;
                text: Logic.tr(Store.is-cn, "RSS源地址");
            }

            HorizontalLayout {
                spacing: Theme.spacing;

                line-edit-url := LineEdit {
                    height: txt-url.preferred-height * 1.6;
                    placeholder-text: Logic.tr(Store.is-cn, "请输入RSS源地址");
                }

                IconBtn {
                    width: line-edit-url.height;
                    bg-color: Colors.transparent;
                    icon: Icons.paste;
                    icon-width: Theme.icon-size * 1.2;

                    // TODO: get text from clipboard
                    clicked => { }
                }
            }
        }

        SettingDetailInnerVbox {
            txt-feed-format := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "RSS源格式");
            }

            feed-format-combobox := ComboBox {
                height: line-edit-url.height;
                model: ["AUTO", "RSS", "ATOM"];
                current-value: self.model[0];
            }
        }

        HorizontalLayout {
            spacing: Theme.spacing * 2;

            HorizontalLayout {
                width: 50%;
                use-proxy-checkbox := CheckBox {
                    text: self.checked ? Logic.tr(Store.is-cn, "已经启用代理") : Logic.tr(Store.is-cn, "未启用代理");
                }
            }

            HorizontalLayout {
                favorite-checkbox := CheckBox {
                    text: self.checked ? Logic.tr(Store.is-cn, "已经关注") : Logic.tr(Store.is-cn, "未关注");
                }
            }
        }
    }
}


component AddEditBtns inherits HorizontalLayout {
    private property <length> btn-width: 100px;

    alignment: center;
    spacing: Theme.spacing * 10;
    padding: Theme.padding * 4;

    callback cancel-clicked();
    callback ok-clicked();

    IconBtn {
        width: root.btn-width; height: 40px;
        text: Logic.tr(Store.is-cn, "取消");
        icon: Icons.delete;
        icon-width: Theme.icon-size;
        border-radius: self.height / 2;
        bg-color: Theme.info-color.brighter(20%);
        bg-pressed-color: self.bg-color.darker(30%);
        colorize: self.bg-pressed-color.darker(50%);

        clicked => { root.cancel-clicked(); }
    }

    IconBtn {
        width: root.btn-width;
        text: Logic.tr(Store.is-cn, "确定");
        icon: Icons.success-fill;
        border-radius: self.height / 2;
        bg-color: Theme.success-color.darker(20%);
        bg-pressed-color: self.bg-color.darker(30%);
        colorize: Theme.basic-white-color;

        clicked => { root.ok-clicked(); }
    }
}


component Body inherits Rectangle {
    private property <BtnIndex> rss-list-btns-index: BtnIndex.New;
    in-out property icon-index <=> ae.icon-index;

    rsslist-vbox := VerticalLayout {
        Head {
            hbox-alignment: LayoutAlignment.start;
            icon-width: Theme.icon-size * 0.7;
            icon: Icons.add-fill;
            title: Logic.tr(Store.is-cn, "添加");
        }

        rsslist := RssList { }

        RssListBtns {
            current-uuid: rsslist.current-uuid;

            current-btn-index(index) => {
                root.rss-list-btns-index = index;

                if (index == BtnIndex.New) {
                    rsslist-vbox.visible = false;
                    ae.set({});
                } else if (index == BtnIndex.Edit) {
                    rsslist-vbox.visible = false;
                    ae.set(Logic.get-rss-ae-setting(rsslist.current-uuid));
                } else if (index == BtnIndex.Delete) {
                    Store.ok-cancel-dialog-setting.title-type = "warning";
                    Store.ok-cancel-dialog-setting.title-text = Logic.tr(Store.is-cn, "警告");
                    Store.ok-cancel-dialog-setting.body-text = Logic.tr(Store.is-cn, "是否删除？");
                    Store.ok-cancel-dialog-setting.handle-type = "remove-rss";
                    Store.ok-cancel-dialog-setting.handle-uuid = rsslist.current-uuid;
                }
            }
        }
    }

    ae-vbox := VerticalLayout {
        visible: !rsslist-vbox.visible;

        ad-head := Head {
            hbox-alignment: LayoutAlignment.start;
            title: root.rss-list-btns-index == BtnIndex.New ? Logic.tr(Store.is-cn, "新建") : Logic.tr(Store.is-cn, "编辑");
            clicked => { rsslist-vbox.visible = true; }
        }

        ae := AddEdit {}

        AddEditBtns {
            cancel-clicked => {
                rsslist-vbox.visible = true;
            }

            ok-clicked => {
                rsslist-vbox.visible = true;

                if (root.rss-list-btns-index == BtnIndex.New) {
                    Logic.new-rss(ae.get());
                } else if (root.rss-list-btns-index == BtnIndex.Edit) {
                    Logic.save-rss(rsslist.current-uuid, ae.get());
                }
            }
        }
    }
}

export component Add inherits VerticalLayout {
    visible: TabIndex.Add == Store.current-tab-index;
    spacing: Theme.spacing;

    in-out property icon-index <=> body.icon-index;

    body := Body {}
}
