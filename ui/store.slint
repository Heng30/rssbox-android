export enum TabIndex {
    Rss,
    Add,
    Favorite,
    Setting,
}

export struct RssEntry {
    uuid: string,
    url: string,
    title: string,
    pub-date: string,
    tags: string,
    author: string,
    summary: string,

    suuid: string,
    is-read: bool,
}

export struct RssList {
    uuid: string,
    name: string,
    url: string,
    use-proxy: bool,
    icon-index: int,
    feed_format: string,
    update-time: string,
    is-mark: bool,
    entry: [RssEntry],

    unread-counts-flag: bool,
}

export struct RssConfig {
    uuid: string,
    name: string,
    url: string,
    use-proxy: bool,
    icon-index: int,
    feed_format: string,
    is-favorite: bool,
}

export struct IconDialogSetting {
    show: bool,
    icons: [image],
}

export struct MessageItem {
    text: string,
    text-type: string,
}

export struct OkCancelDialogSetting {
    title-type: string,
    title-text: string,
    body-text: string,
    handle-type: string,
    handle-uuid: string,
}

export struct SettingUI {
    font-size: string,
    font-family: string,
    language: string,
}

export struct SettingProxy {
    enabled: bool,
    url: string,
    port: string,
}

export struct SettingDialogConfig {
    show: bool,
    ui: SettingUI,
    proxy: SettingProxy,
}

export struct AboutDialog {
    show: bool,
    title: string,
    text: string,
    sponsor: string,
}

export global Store  {
    out property<TabIndex> current-tab-index: TabIndex.Add;

    in-out property<[RssEntry]> rss-entry: [
        {
            uuid: "42342e2jkfjk",
            url: "https://www.zhihu.com/rss",
            pub-date: "2023-10-22 23:12:34",
            tags: "rust",
            is-read: false,
            author: "hello",
            title: "Actors may modify their own private state, but can only affect each other indirectly through messaging (removing the need for lock-based synchronization).",
            summary: "The actor model in computer science is a mathematical model of concurrent computation that treats an actor as the basic building block of concurrent computation. \nIn response to a message it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received.",
        },
        {
            uuid: "xx2342jkfjk",
            url: "https://bing.com",
            pub-date: "2023-11-12 13:12:34",
            tags: "slint-ui, rust",
            is-read: true,
            title: "中文测试链接",
            summary: "The actor model in computer science is a mathematical model of concurrent computation that treats an actor as the basic building block of concurrent computation. \nIn response to a message it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received.",
        },
        {
            uuid: "2342jkfjk",
            url: "http://azure.com",
            pub-date: "2023-11-12 13:12:34",
            is-read: true,
            title: "hello rust",
            summary: "The actor model in computer science is a mathematical model of concurrent computation that treats an actor as the basic building block of concurrent computation. \nIn response to a message it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received.",
        },
        {
            uuid: "2342jkfjk",
            url: "http://azure.com",
            pub-date: "2023-11-12 13:12:34",
            is-read: true,
            title: "hello rust",
        },
        {
            uuid: "2342jkfjk",
            url: "http://azure.com",
            pub-date: "2023-11-12 13:12:34",
            is-read: true,
            title: "hello rust",
            summary: "The actor model in computer science is a mathematical model of concurrent computation that treats an actor as the basic building block of concurrent computation. \nIn response to a message it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received.",
        }
    ];

    in-out property<string> current-rss-uuid;
    in-out property<[RssList]> rss-lists: [
        {
            uuid: "uuid-1",
            is-mark: true,
            use_proxy: false,
            icon-index: 0,
            name: "测试-1",
        },
        {
            uuid: "uuid-2",
            is-mark: false,
            use_proxy: false,
            icon-index: 0,
            name: "测试-2",
        },
    ];

    in-out property<[RssEntry]> rss-favorite-entry: [
        {
            uuid: "42342e2jkfjk",
            url: "https://www.zhihu.com/rss",
            pub-date: "2023-10-22 23:12:34",
            tags: "rust",
            is-read: false,
            author: "hello",
            title: "Actors may modify their",
            summary: "The actor model in computer science is a mathematical model of concurrent computation that treats an actor as the basic building block of concurrent computation. \nIn response to a message it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received.",
        },
        {
            uuid: "42342e2jkfjk",
            url: "https://www.zhihu.com/rss",
            pub-date: "2023-10-22 23:12:34",
            tags: "rust",
            is-read: false,
            author: "hello",
            title: "收藏测试-1",
            summary: "The actor model in computer science is a mathematical model of concurrent computation that treats an actor as the basic building block of concurrent computation. \nIn response to a message it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received.",
        },
    ];

    in-out property<MessageItem> message;
    in-out property<OkCancelDialogSetting> ok-cancel-dialog-setting;
    in-out property<bool> is-cn: setting-dialog-config.ui.language == "cn";

    in-out property<SettingDialogConfig> setting-dialog-config: {
        show: false,
        ui: {
            font-size: "16",
            font-family: "SourceHanSerifCN",
            language: "cn",
        },
        proxy: {
            enabled: false,
            url: "127.0.0.1",
            port: "1080",
        }
    };

    in-out property<AboutDialog> about-dialog: {
        show: false,
        title: "rssbox v0.0.1",
        text: "Based on Slint-UI. Copyright 2022-2030 The Heng30 Company Ltd. All rights reserved. The program is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.",
        sponsor: "0xf1199999751b1a3A74590adBf95401D19AB30014",
    };

    in-out property<{show: bool, text-cn: string, text-en: string}> help-dialog: {
        show: false,
        text-cn:
              "配置和数据:\n"
            + "  1. 配置保存在~/.config/bitbox目录下。\n"
            + "  2. 数据保存在~/.local/share/bitbox目录下。\n"
            + "\n注意事项:\n"
            + "  1. 使用 blockstream API 进行交易广播，获取UTXO等链上信息。\n",

        text-en:
              "Configuration and data:\n"
            + "  1. Configuration is stored in the ~/.config/bitbox directory.\n"
            + "  2. Data is stored in the ~/.local/share/bitbox directory.\n"
            + "\nNote:\n"
            + "  1. Use blockstream API to broadcast transation, fetch UTXO and other on chain information.\n",
    };

    in-out property<IconDialogSetting> icons-dialog-setting: {
        show: false,
        icons : [
            @image-url("./icons/1.svg"), @image-url("./icons/2.svg"),
            @image-url("./icons/3.svg"), @image-url("./icons/4.svg"),
            @image-url("./icons/5.svg"), @image-url("./icons/6.svg"),
            @image-url("./icons/7.svg"), @image-url("./icons/8.svg"),
            @image-url("./icons/9.svg"), @image-url("./icons/10.svg"),
            @image-url("./icons/11.svg"), @image-url("./icons/12.svg"),
            @image-url("./icons/13.svg"), @image-url("./icons/14.svg"),
            @image-url("./icons/15.svg"), @image-url("./icons/16.svg"),
            @image-url("./icons/17.svg"), @image-url("./icons/18.svg"),
            @image-url("./icons/19.svg"), @image-url("./icons/20.svg"),
            @image-url("./icons/21.svg"), @image-url("./icons/22.svg"),
            @image-url("./icons/23.svg"), @image-url("./icons/24.svg"),
            @image-url("./icons/25.svg"), @image-url("./icons/26.svg"),
            @image-url("./icons/27.svg"), @image-url("./icons/28.svg"),
            @image-url("./icons/29.svg"), @image-url("./icons/30.svg"),
            @image-url("./icons/31.svg"), @image-url("./icons/32.svg"),
            @image-url("./icons/33.svg"), @image-url("./icons/34.svg"),
            @image-url("./icons/35.svg"), @image-url("./icons/36.svg"),
            @image-url("./icons/37.svg"), @image-url("./icons/38.svg"),
            @image-url("./icons/39.svg"), @image-url("./icons/40.svg"),
            @image-url("./icons/41.svg"), @image-url("./icons/42.svg"),
            @image-url("./icons/43.svg"), @image-url("./icons/44.svg"),
            @image-url("./icons/45.svg"), @image-url("./icons/46.svg"),
            @image-url("./icons/47.svg"), @image-url("./icons/48.svg"),
        ],
    };

    public function switch-tab(tab-index: TabIndex) {
        current-tab-index = tab-index;
    }
}


